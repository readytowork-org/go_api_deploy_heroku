openapi: 3.0.0
info:
  title: Go Lang Clean Architecture Skeleton project
  description: This repository manages the MVC architecture with Services and Repositories integration with Gin Router with unit tests for service and repositories
  version: 0.0.1

servers:
  - url: https://golangcleanarchitecture.wesionary.team # TODO: this url is fake and needs to be changed
    description: Link for the testing purpose

tags:
  - name: users
    description: API documentation about User resources
    externalDocs:
      url: http://docs.api.com # TODO: change this url to valid one
  - name: posts
    description: API documentation about Post resources
    externalDocs:
      url: http://docs.api.com # TODO: change this url to valid one

paths:
  /users:
    get:
      summary: Returns the list of all users
      description: Makes a call to users table and fetches all the users
      operationId: getUsers
      tags:
        - users
      responses:
        "200":
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Returns the posted new users information with generated ID
      description: API to create a new user. Duplicated emails emails are allowed
      operationId: addUser
      tags:
        - users
      requestBody:
        description: User that is to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "200":
          description: user response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts:
    get:
      summary: Returns the list of all the posts
      description: Makes a call to posts table and fetches all the posts
      operationId: getPosts
      tags:
        - posts
      responses:
        "200":
          description: A JSON array of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Returns the object of new created post with id
      description: API to create new post.
      operationId: addPost
      tags:
        - posts
      requestBody:
        description: Post that is to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPost"
      responses:
        "200":
          description: post response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      allOf:
        - $ref: "#/components/schemas/NewUser"
        - type: object
          required:
            - id
            - name
            - email
            - dob
          properties:
            id:
              type: integer
              format: int64

    NewUser:
      type: object
      required:
        - name
        - email
        - dob
      properties:
        name:
          type: string
        email:
          type: string
        dob:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    Post:
      allOf:
        - $ref: "#/components/schemas/NewPost"
        - type: object
          required:
            - id
            - title
            - text
          properties:
            id:
              type: integer
              format: int64

    NewPost:
      type: object
      required:
        - title
        - text
      properties:
        title:
          type: string
        text:
          type: string
